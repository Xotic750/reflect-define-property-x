{"version":3,"sources":["../src/reflect-define-property-x.js"],"names":[],"mappings":"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","file":"reflect-define-property-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport assertIsObject from 'assert-is-object-x';\nimport $defineProperty from 'object-define-property-x';\nimport objectKeys from 'object-keys-x';\nimport arrayIncludes from 'array-includes-x';\nimport has from 'has-own-property-x';\nimport getOwnPropertyDescriptor from 'object-get-own-property-descriptor-x';\nimport some from 'array-some-x';\nimport toBoolean from 'to-boolean-x';\n\nconst testSupportsWritable = function testSupportsWritable() {\n  const testObj = $defineProperty({}, 'test', {\n    configurable: true,\n    enumerable: true,\n    value: 'Testing',\n    writable: false,\n  });\n\n  const res = attempt(function attemptee() {\n    testObj.test = true;\n  });\n\n  return res.threw || testObj.test === 'Testing';\n};\n\nconst supportsWritable = testSupportsWritable();\n\nconst testSupportsEnumerable = function testSupportsEnumerable() {\n  const testObj = $defineProperty({}, 'test', {\n    configurable: true,\n    enumerable: false,\n    value: 'Testing',\n    writable: true,\n  });\n\n  return arrayIncludes(objectKeys(testObj), 'test') === false;\n};\n\nconst supportsEnumerable = testSupportsEnumerable();\n\nconst testSupportsConfigurable = function testSupportsConfigurable() {\n  const testObj = $defineProperty({}, 'test', {\n    configurable: false,\n    enumerable: true,\n    value: 'Testing',\n    writable: true,\n  });\n\n  const res = attempt(function attemptee() {\n    delete testObj.test;\n  });\n\n  return res.threw || testObj.test === 'Testing';\n};\n\nconst supportsConfigurable = testSupportsConfigurable();\n\nconst toComparableDescriptor = function toComparableDescriptor(desc) {\n  const descriptor = {};\n\n  if (supportsEnumerable) {\n    descriptor.enumerable = toBoolean(desc.enumerable);\n  }\n\n  if (supportsConfigurable) {\n    descriptor.configurable = toBoolean(desc.configurable);\n  }\n\n  if (has(desc, 'value')) {\n    descriptor.value = desc.value;\n  }\n\n  if (supportsWritable) {\n    descriptor.writable = toBoolean(desc.writable);\n  }\n\n  if (has(desc, 'get') || has(desc, 'set')) {\n    descriptor.get = desc.get;\n    descriptor.set = desc.set;\n  }\n\n  return descriptor;\n};\n\nconst areDescriptorsEqual = function areDescriptorsEqual(obj) {\n  const {actualObj, attributesObj, propertyKey} = obj;\n  const actual = toComparableDescriptor(getOwnPropertyDescriptor(actualObj, propertyKey));\n  const requested = toComparableDescriptor(attributesObj);\n  const actualKeys = objectKeys(actual);\n\n  if (actualKeys.length !== objectKeys(requested).length) {\n    return false;\n  }\n\n  return (\n    some(actualKeys, function iteratee(key) {\n      return actual[key] !== requested[key];\n    }) === false\n  );\n};\n\n/**\n * This method allows precise addition to or modification of a property on an object.\n * For more details see the Object.defineProperty which is similar.\n * Object.defineProperty returns the object or throws a TypeError if the property\n * has not been successfully defined. Reflect.defineProperty, however, simply returns\n * a Boolean indicating whether or not the property was successfully defined.\n *\n * @param {*} target - The target object on which to define the property.\n * @param {*} propertyKey - The name of the property to be defined or modified.\n * @param {*} attributes - The attributes for the property being defined or modified.\n * @throws {TypeError} If target is not an Object.\n * @returns {object} A Boolean indicating whether or not the property was successfully defined.\n */\nconst defineProperty = function defineProperty(target, propertyKey, attributes) {\n  assertIsObject(target);\n  const result = attempt($defineProperty, target, propertyKey, attributes);\n\n  if (result.threw) {\n    return false;\n  }\n\n  return areDescriptorsEqual({actualObj: result.value, attributesObj: attributes, propertyKey});\n};\n\nexport default defineProperty;\n"]}